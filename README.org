#+Author: Diana Muñoz @DIANAIMC, Mariano Alcaraz @MarianoAlcarazAguilar, Sebastián Murillo @S-murilloG
# SpotifyAPI_tests
Proyecto Final: Bases de Datos No Relacionales

* Introducción
  Este es el repositorio con el contenido del proyecto final para la clase de Bases de Datos No Relacionales de la Licenciatura en Ciencia de Datos del ITAM. 
  
* Objetivo
  Buscar alguna API que llame la atención al equipo, con esta API, conectarla através de python con una base de datos MongoDB. Posteriormente, hacer un ETL que cargue la base de datos procesada a una base de datos columnar y a una base de datos estilo grafo; evidentemente las transformaciones y los subconjuntos de datos ocupados serán diferentes para cada base de datos ya que tienen fines diferentes cada una.

* Desarrollo
  A continuación explicaremos detalladamente el código por partes. Si se desea correr todo el proyecto, ejecute los siguientes comandos:

#+begin_src sh
# También se requiere del comando jq
# Se sugiere AMPLIAMENTE trabajar con el main.sh
pip install -r requirements.txt
./main.sh
#+end_src

Una vez, ejecutado, ya estarán extraídos e insertados todos los datos tanto en Mongo, Monet y Neo4j. Para ver las queries analíticas ir al final del archivo.

Si es que se prefiere correr los "cachos" de código con forme a la explicación, entonces hay que empezar haciendo este:

#+begin_src sh
pip install -r requirements.txt

CURRENT_DIR=$(pwd)

mkdir -p $CURRENT_DIR/data
mkdir -p $CURRENT_DIR/data/csv
mkdir -p $CURRENT_DIR/data/csv/monet
mkdir -p $CURRENT_DIR/data/csv/neo4j
#+end_src

* Extracción de datos - API
  Nosotros elegimos la API de Spotify ya que nos parecía divertida (spoiler al final ya ni fue tan divertido) por lo que extrajimos 3 objetos que nos parecieron interesantes para analizar posteriormente, los cuales al extraerlos de la API se ven de la siguiente forma:
*** Artist:
  #+begin_src js
  {
  "artists": {
    "href": "https://api.spotify.com/v1/search?query=2022&type=artist&locale=es-ES%2Ces%3Bq%3D0.9&offset=0&limit=1",
    "items": [
      {
        "external_urls": {
          "spotify": "https://open.spotify.com/artist/4nKf2r4jBRR6iz4OqjllNs"
        },
        "followers": {
          "href": null,
          "total": 217
        },
        "genres": [],
        "href": "https://api.spotify.com/v1/artists/4nKf2r4jBRR6iz4OqjllNs",
        "id": "4nKf2r4jBRR6iz4OqjllNs",
        "images": [
          {
            "height": 640,
            "url": "https://i.scdn.co/image/ab67616d0000b273563867731ebd689ae6cb46ae",
            "width": 640
          },
          {
            "height": 300,
            "url": "https://i.scdn.co/image/ab67616d00001e02963bdfec6eeb8a749d2114bc",
            "width": 300
          },
          {
            "height": 64,
            "url": "https://i.scdn.co/image/ab67616d00004851963bdfec6eeb8a749d2114bc",
            "width": 64
          }
        ],
        "name": "2022 Studio Cast of Bliss",
        "popularity": 27,
        "type": "artist",
        "uri": "spotify:artist:4nKf2r4jBRR6iz4OqjllNs"
      }
    ],
    "limit": 1,
    "next": "https://api.spotify.com/v1/search?query=2022&type=artist&locale=es-ES%2Ces%3Bq%3D0.9&offset=1&limit=1",
    "offset": 0,
    "previous": null,
    "total": 297
  }
}
 #+end_src 

*** Album:
  #+begin_src js
  {
  "albums": {
    "href": "https://api.spotify.com/v1/search?query=2022&type=album&locale=es-ES%2Ces%3Bq%3D0.9&offset=0&limit=1",
    "items": [
      {
        "album_type": "single",
        "artists": [
          {
            "external_urls": {
              "spotify": "https://open.spotify.com/artist/6HaGTQPmzraVmaVxvz6EUc"
            },
            "href": "https://api.spotify.com/v1/artists/6HaGTQPmzraVmaVxvz6EUc",
            "id": "6HaGTQPmzraVmaVxvz6EUc",
            "name": "Jung Kook",
            "type": "artist",
            "uri": "spotify:artist:6HaGTQPmzraVmaVxvz6EUc"
          },
          {
            "external_urls": {
              "spotify": "https://open.spotify.com/artist/3Nrfpe0tUJi4K4DXYWgMUX"
            },
            "href": "https://api.spotify.com/v1/artists/3Nrfpe0tUJi4K4DXYWgMUX",
            "id": "3Nrfpe0tUJi4K4DXYWgMUX",
            "name": "BTS",
            "type": "artist",
            "uri": "spotify:artist:3Nrfpe0tUJi4K4DXYWgMUX"
          }
        ],
        "available_markets": [
          "AD",
          "AE",
          "AG",
          "AL",
          "AM",
          ...
        ],
        "external_urls": {
          "spotify": "https://open.spotify.com/album/0gr5OmB74UhoANEXwYT3gE"
        },
        "href": "https://api.spotify.com/v1/albums/0gr5OmB74UhoANEXwYT3gE",
        "id": "0gr5OmB74UhoANEXwYT3gE",
        "images": [
          {
            "height": 640,
            "url": "https://i.scdn.co/image/ab67616d0000b273ef57183066d6cac0cabb85c6",
            "width": 640
          },
          {
            "height": 300,
            "url": "https://i.scdn.co/image/ab67616d00001e02ef57183066d6cac0cabb85c6",
            "width": 300
          },
          {
            "height": 64,
            "url": "https://i.scdn.co/image/ab67616d00004851ef57183066d6cac0cabb85c6",
            "width": 64
          }
        ],
        "name": "Dreamers [Music from the FIFA World Cup Qatar 2022 Official Soundtrack]",
        "release_date": "2022-11-20",
        "release_date_precision": "day",
        "total_tracks": 1,
        "type": "album",
        "uri": "spotify:album:0gr5OmB74UhoANEXwYT3gE"
      }
    ],
    "limit": 1,
    "next": "https://api.spotify.com/v1/search?query=2022&type=album&locale=es-ES%2Ces%3Bq%3D0.9&offset=1&limit=1",
    "offset": 0,
    "previous": null,
    "total": 10002
  }
}
  #+end_src
  
*** Track:
  #+begin_src js
  {
  "tracks": {
    "href": "https://api.spotify.com/v1/search?query=2022&type=track&locale=es-ES%2Ces%3Bq%3D0.9&offset=0&limit=1",
    "items": [
      {
        "album": {
          "album_type": "single",
          "artists": [
            {
              "external_urls": {
                "spotify": "https://open.spotify.com/artist/6HaGTQPmzraVmaVxvz6EUc"
              },
              "href": "https://api.spotify.com/v1/artists/6HaGTQPmzraVmaVxvz6EUc",
              "id": "6HaGTQPmzraVmaVxvz6EUc",
              "name": "Jung Kook",
              "type": "artist",
              "uri": "spotify:artist:6HaGTQPmzraVmaVxvz6EUc"
            },
            {
              "external_urls": {
                "spotify": "https://open.spotify.com/artist/3Nrfpe0tUJi4K4DXYWgMUX"
              },
              "href": "https://api.spotify.com/v1/artists/3Nrfpe0tUJi4K4DXYWgMUX",
              "id": "3Nrfpe0tUJi4K4DXYWgMUX",
              "name": "BTS",
              "type": "artist",
              "uri": "spotify:artist:3Nrfpe0tUJi4K4DXYWgMUX"
            }
          ],
          "available_markets": [
            "AD",
            "AE",
            "AG",
            "AL",
            "AM",
            "AO",
            "AR",
            "AT",
            ...
          ],
          "external_urls": {
            "spotify": "https://open.spotify.com/album/0gr5OmB74UhoANEXwYT3gE"
          },
          "href": "https://api.spotify.com/v1/albums/0gr5OmB74UhoANEXwYT3gE",
          "id": "0gr5OmB74UhoANEXwYT3gE",
          "images": [
            {
              "height": 640,
              "url": "https://i.scdn.co/image/ab67616d0000b273ef57183066d6cac0cabb85c6",
              "width": 640
            },
            {
              "height": 300,
              "url": "https://i.scdn.co/image/ab67616d00001e02ef57183066d6cac0cabb85c6",
              "width": 300
            },
            {
              "height": 64,
              "url": "https://i.scdn.co/image/ab67616d00004851ef57183066d6cac0cabb85c6",
              "width": 64
            }
          ],
          "name": "Dreamers [Music from the FIFA World Cup Qatar 2022 Official Soundtrack]",
          "release_date": "2022-11-20",
          "release_date_precision": "day",
          "total_tracks": 1,
          "type": "album",
          "uri": "spotify:album:0gr5OmB74UhoANEXwYT3gE"
        },
        "artists": [
          {
            "external_urls": {
              "spotify": "https://open.spotify.com/artist/6HaGTQPmzraVmaVxvz6EUc"
            },
            "href": "https://api.spotify.com/v1/artists/6HaGTQPmzraVmaVxvz6EUc",
            "id": "6HaGTQPmzraVmaVxvz6EUc",
            "name": "Jung Kook",
            "type": "artist",
            "uri": "spotify:artist:6HaGTQPmzraVmaVxvz6EUc"
          },
          {
            "external_urls": {
              "spotify": "https://open.spotify.com/artist/3Nrfpe0tUJi4K4DXYWgMUX"
            },
            "href": "https://api.spotify.com/v1/artists/3Nrfpe0tUJi4K4DXYWgMUX",
            "id": "3Nrfpe0tUJi4K4DXYWgMUX",
            "name": "BTS",
            "type": "artist",
            "uri": "spotify:artist:3Nrfpe0tUJi4K4DXYWgMUX"
          },
          {
            "external_urls": {
              "spotify": "https://open.spotify.com/artist/5C01hDqpEmrmDfUhX9YWsH"
            },
            "href": "https://api.spotify.com/v1/artists/5C01hDqpEmrmDfUhX9YWsH",
            "id": "5C01hDqpEmrmDfUhX9YWsH",
            "name": "FIFA Sound",
            "type": "artist",
            "uri": "spotify:artist:5C01hDqpEmrmDfUhX9YWsH"
          }
        ],
        "available_markets": [
          "AD",
          "AE",
          "AG",
          "AL",
          "AM",
          "AO",
          "AR",
          "AT",
          ...
        ],
        "disc_number": 1,
        "duration_ms": 201391,
        "explicit": false,
        "external_ids": {
          "isrc": "QZNMY2232113"
        },
        "external_urls": {
          "spotify": "https://open.spotify.com/track/1RDvyOk4WtPCtoqciJwVn8"
        },
        "href": "https://api.spotify.com/v1/tracks/1RDvyOk4WtPCtoqciJwVn8",
        "id": "1RDvyOk4WtPCtoqciJwVn8",
        "is_local": false,
        "name": "Dreamers [Music from the FIFA World Cup Qatar 2022 Official Soundtrack]",
        "popularity": 91,
        "preview_url": "https://p.scdn.co/mp3-preview/823c1a9c7d369229606c936174b152479fa92e0f?cid=774b29d4f13844c495f206cafdad9c86",
        "track_number": 1,
        "type": "track",
        "uri": "spotify:track:1RDvyOk4WtPCtoqciJwVn8"
      }
    ],
    "limit": 1,
    "next": "https://api.spotify.com/v1/search?query=2022&type=track&locale=es-ES%2Ces%3Bq%3D0.9&offset=1&limit=1",
    "offset": 0,
    "previous": null,
    "total": 10002
  }
}
  #+end_src
  
 En el siguiente escript nos encargamos de extraer 1000 (si es que hay) elementos de "artists", "albums" y "tracks" durante 5 años, en particular, entre el 2018 y el 2022.
 
*** Para poder extraer los datos tuvimos varias limitantes:
 
*1. Spotify solo nos permite extraer como máximo 50 objetos por request:*

  Iterativamente extraemos 50 objetos hasta llegar al número de objetos que realmente deseamos.
  
*2. De igual forma, solo nos permite extraer hasta 1000 elementos en total por query:*

  Por ello decidimos extraer 1000 elementos por objeto para 5 años distintos (cada año es un query diferente).
  
*3. Para poder hacer el request necesitamos tener una autorización, un token, para la cual tienes que generarla con un cuenta de Spotify:*

  Generamos credenciales de Spotify a partir de una cuenta de Spotify de un integrante del equipo (para fines del proyecto las credenciales están expuestas, pero una vez que el proyecto sea calificado se removerán). Dichas credenciales nos permiten generar un un token de autenticación por cada ejecución del proyecto. 

*4. Una vez obtenidos los elementos notamos que había repetidos pues Spotify te brinda los artistas de forma aleatoria y al no seguir un orden puede que nos por ejecución más de un elemento.*

 Con la librería iteration_utilities pudimos eliminar fácilmente aquellos elementos repetidos de la lista de jsons.
 
#+begin_src py
import requests
import datetime
import base64
import time

from pymongo import MongoClient
from iteration_utilities import unique_everseen

def get_access_token(client_id, client_secret, token_url):
    token_data = {"grant_type": "client_credentials"}
    creds = f"{client_id}:{client_secret}"
    creds_b64 = base64.b64encode(creds.encode())
    token_headers = {"Authorization": f"Basic {creds_b64.decode()}"}

    r = requests.post(token_url, data=token_data, headers=token_headers)
    if r.status_code not in range(200, 299):
        raise Exception("Could not authenticate client.")

    data = r.json()
    now = datetime.datetime.now()
    access_token = data['access_token']
    return access_token

def get_data(access_token, lista, limite, year, type):
    offset = 0
    for _ in range(round(limite/50)):
        print('.', end='', flush=True)
        response = requests.get(
         f'https://api.spotify.com/v1/search?q=year%3A{year}&type={type}&limit=50&offset={offset}',
            headers={
                "Authorization": f"Bearer {access_token}",
                'Content-Type': 'application/json'
            }
        )
        json_resp = response.json()
        tipo_aux = f"{type}s"
        if tipo_aux in list(json_resp.keys()):
            current_data = json_resp[tipo_aux]['items']
            lista.extend(current_data)
            offset += 50
        else:
            break
    return lista

client_id = 'af1707ed062448f9aa96ffd1b36737ac'
client_secret = '017e9f625cc149b8b1e11c69bd21ef1d'
token_url = "https://accounts.spotify.com/api/token"

access_token = get_access_token(client_id, client_secret, token_url)

anio_inicio = 2018
anio_fin = 2023

artistas = []
albums = []
tracks = []

for year in range(anio_inicio, anio_fin):
    print(f'\n\tAño {year} ', end='')
    artistas = get_data(access_token, artistas, 1000, year, 'artist')

artistas_final = list(unique_everseen(artistas))


for year in range(anio_inicio, anio_fin):
    print(f'\n\tAño {year} ', end='')
    albums = get_data(access_token, albums, 1000, year, 'album')

albums_final = list(unique_everseen(albums))


for year in range(anio_inicio, anio_fin):
    print(f'\n\tAño {year} ', end='')
    tracks = get_data(access_token, tracks, 1000, year, 'track')

tracks_final = list(unique_everseen(tracks))

#+end_src
    
 Una vez hecho lo anterior, podemos insertar nuestros datos en Mongo.
 
* Transfromación e inserción de datos
** Mongo

~Nota:~ Para que este código funcione, debe correrse junto al anterior y asegurarse que el contenedor de Mongo en Docker ya esté funcionando, lo cual el "main.sh" lo hace a través del siguiente script:

#+begin_src py
client = MongoClient('localhost', 27017)
my_database = client.spotify
my_collection1 = my_database.artists
my_collection2 = my_database.albums
my_collection3 = my_database.tracks

my_collection1.insert_many(artistas_final)
my_collection2.insert_many(albums_final)
my_collection3.insert_many(tracks_final)
#+end_src


#+begin_src sh
docker stop spotify 
docker rm spotify 

docker volume create spotify-data 
docker run -d --name spotify -p 27017:27017 --mount source=spotify-data,target=/data mongo 

docker start spotify 
sleep 2

docker exec -it spotify mongosh --quiet \
--eval 'use spotify' \
--eval 'db.artists.drop()' \
--eval 'db.albums.drop()' \
--eval 'db.tracks.drop()' \
--eval 'db.uw_artists.drop()' \
--eval 'db.uw_albums.drop()' \
--eval 'db.uw_tracks.drop()' \
> /dev/null
#+end_src

*Transformamos los datos*
Una vez insertados los datos, debemos extraer los datos correspondientes para insertarlos a una base de datos en Monet y otra en Neo4j, para ello tomamos 2 decisiones clave:

1. Hacer ~unwind~ a "artist" sobre sus géneros, ~unwind~ a "album" y a "track" sobre ~available_markets~ con el fin de análisar los géneros de los artistas y los paises donde las canciones y albumes se encuentran disponibles. Por la naturaleza de dichos objetos, habrán muchísimos elementos repetidos y qué mejor lugar para hacer la analítica que *Monet*
2. Hacer ~unwind~ a "album" y a "track" sobre ~artists_id~ con el fin de análizar las relaciones entre "artists", "albums" y "tracks". Y qué mejor lugar para hacer la analítica de relaciones entre objetos que en *Neo4j*

Para ello, ejecutamos el siguiente script:

#+begin_src sh
docker exec -it spotify mongosh --quiet \
  --eval 'use spotify' \
  --eval 'db.artists.aggregate([{$unwind:"$genres"}, {$project:{_id:0}}, {$out:"uw_artists_mon"}])'

docker exec -it spotify mongosh --quiet \
  --eval 'use spotify' \
  --eval 'db.albums.aggregate([{$unwind:"$available_markets"}, {$project:{_id:0}}, {$out:"uw_albums_mon"}])'

docker exec -it spotify mongosh --quiet \
  --eval 'use spotify' \
  --eval 'db.tracks.aggregate([{$unwind:"$available_markets"}, {$project: {_id:0}}, {$out:"uw_tracks_mon"}])'


docker exec -it spotify mongosh --quiet \
  --eval 'use spotify' \
  --eval 'db.artists.aggregate([{$project:{_id:0}}, {$out:"uw_artists_neo"}])' 

docker exec -it spotify mongosh --quiet \
  --eval 'use spotify' \
  --eval 'db.albums.aggregate([{$unwind:"$artists"}, {$project:{_id:0}}, {$out:"uw_albums_neo"}])'

docker exec -it spotify mongosh --quiet \
  --eval 'use spotify' \
  --eval 'db.tracks.aggregate([{$unwind:"$artists"}, {$project: {_id:0}}, {$out:"uw_tracks_neo"}])' 
#+end_src

Una vez hechos los ~unwind~ e insertarlos a nuevas colecciones, estas las extraemos como archivos ~.json~ y posteriormente dichos archivos los tranformamos a ~csv~. Nótese que como Mongo está en un contenedor de Docker, debemos sacar dichos archivos de Docker para tener acceso a ellos en nuestra computadora, eso hacemos a continuación:

#+begin_src sh
WORKING_DIR=$(pwd)
WORKING_DIR=$WORKING_DIR/data

CONTAINER_NAME='spotify'
DATA_BASE_NAME='spotify'

docker exec $CONTAINER_NAME mkdir -p data_spotify

COLLECTION_NAME='uw_albums_mon'
OUTPUT_FILE='/data_spotify/albums_mon.json'
docker exec $CONTAINER_NAME mongoexport -d $DATA_BASE_NAME -c $COLLECTION_NAME --out $OUTPUT_FILE

COLLECTION_NAME='uw_artists_mon'
OUTPUT_FILE='/data_spotify/artists_mon.json'
docker exec $CONTAINER_NAME mongoexport -d $DATA_BASE_NAME -c $COLLECTION_NAME --out $OUTPUT_FILE 

COLLECTION_NAME='uw_tracks_mon'
OUTPUT_FILE='/data_spotify/tracks_mon.json'
docker exec $CONTAINER_NAME mongoexport -d $DATA_BASE_NAME -c $COLLECTION_NAME --out $OUTPUT_FILE 

COLLECTION_NAME='uw_albums_neo'
OUTPUT_FILE='/data_spotify/albums_neo.json'
docker exec $CONTAINER_NAME mongoexport -d $DATA_BASE_NAME -c $COLLECTION_NAME --out $OUTPUT_FILE 

COLLECTION_NAME='uw_artists_neo'
OUTPUT_FILE='/data_spotify/artists_neo.json'
docker exec $CONTAINER_NAME mongoexport -d $DATA_BASE_NAME -c $COLLECTION_NAME --out $OUTPUT_FILE

COLLECTION_NAME='uw_tracks_neo'
OUTPUT_FILE='/data_spotify/tracks_neo.json'
docker exec $CONTAINER_NAME mongoexport -d $DATA_BASE_NAME -c $COLLECTION_NAME --out $OUTPUT_FILE 

ID_CONTAINER=$(docker ps -aqf "name=$CONTAINER_NAME")
docker cp $ID_CONTAINER:/data_spotify $WORKING_DIR/
#+end_src

Una vez que tenemos los archivos ~json~ en nuestra máquina, ahora sí podemos transformarlos a csv. En el siguiente script podemos ver que tuvimos que limpiar los nombres de los "artists", "albums" y "tracks" (estuvo horrible porque no podíamos insertarlos a Monet porque habían carcteres especiales que no veíamos, fue un dolor de cabeza mientras no sabíamos cuál era el error), lo hicimos tanto para los csvs para Monet como los que eran para Neo4j.

#+begin_src sh
WORKING_DIR=$(pwd)
WORKING_DIR=$WORKING_DIR/data

echo 'followers,genre,artist_id,popularity,namee' > $WORKING_DIR/csv/monet/artists.csv
echo 'available_market,album_id,release_date,total_tracks,namee' > $WORKING_DIR/csv/monet/albums.csv
echo 'album_id,available_market,disc_number,duration_ms,explicit,track_id,popularity,track_number,namee' > $WORKING_DIR/csv/monet/tracks.csv 

jq -r '[.followers.total, .genres, .id, .popularity, .name] | @csv' $WORKING_DIR/data_spotify/artists_mon.json | awk -F, '{printf "%s,%s,%s,%s,%s\n", $1, $2, $3, $4, $5}' >> $WORKING_DIR/csv/monet/artists.csv
jq -r '[.available_markets, .id, .release_date, .total_tracks, .name] | @csv' $WORKING_DIR/data_spotify/albums_mon.json | awk -F, '{printf "%s,%s,%s, %s,%s\n", $1, $2, $3, $4, $5}' >> $WORKING_DIR/csv/monet/albums.csv
jq -r '[.album.id, .available_markets, .disc_number, .duration_ms, .explicit, .id, .popularity, .track_number, .name] | @csv' $WORKING_DIR/data_spotify/tracks_mon.json | awk -F, '{printf "%s,%s,%s,%s,%s,%s,%s,%s,%s\n", $1, $2, $3, $4, $5, $6, $7, $8, $9}' >> $WORKING_DIR/csv/monet/tracks.csv
 
cat $WORKING_DIR/csv/monet/artists.csv | sed 's/.$//' | sed 's/$/"/' | sed '1s/.$//' | sed "$ d" | sed 's/"//g' | sed 's/\r/\\r/g' | sed 's/\\//g' | sed "s/[#|$|%|*|@|&|'|-|_|¿|?|+|=]//g" | sed 's/[^a-zA-Z0-9, -]//g' > $WORKING_DIR/csv/monet/artists_mon.csv
cat $WORKING_DIR/csv/monet/albums.csv | sed 's/.$//' | sed 's/$/"/' | sed '1s/.$//' | sed "$ d" | sed 's/"//g' | sed 's/\r/\\r/g' | sed 's/\\//g' | sed "s/[#|$|%|*|@|&|'|-|_|¿|?|+|=]//g" | sed 's/[^a-zA-Z0-9, -]//g' > $WORKING_DIR/csv/monet/albums_mon.csv
cat $WORKING_DIR/csv/monet/tracks.csv | sed 's/.$//' | sed 's/$/"/' | sed '1s/.$//' | sed "$ d" | sed 's/"//g' | sed 's/\r/\\r/g' | sed 's/\\//g' | sed "s/[#|$|%|*|@|&|'|-|_|¿|?|+|=]//g" | sed 's/[^a-zA-Z0-9, -]//g' > $WORKING_DIR/csv/monet/tracks_mon.csv

rm $WORKING_DIR/csv/monet/artists.csv
rm $WORKING_DIR/csv/monet/albums.csv
rm $WORKING_DIR/csv/monet/tracks.csv

echo 'followers,artist_id,popularity,namee' > $WORKING_DIR/csv/neo4j/artists.csv
echo 'artist_id,album_id,release_date,total_tracks,namee' > $WORKING_DIR/csv/neo4j/albums.csv
echo 'album_id,artist_id,disc_number,duration_ms,explicit,track_id,popularity,track_number,namee' > $WORKING_DIR/csv/neo4j/tracks.csv 

jq -r '[.followers.total, .id, .popularity, .name] | @csv' $WORKING_DIR/data_spotify/artists_neo.json | awk -F, '{printf "%s,%s,%s,%s\n", $1, $2, $3, $4}' >> $WORKING_DIR/csv/neo4j/artists.csv
jq -r '[.artists.id, .id, .release_date, .total_tracks, .name] | @csv' $WORKING_DIR/data_spotify/albums_neo.json | awk -F, '{printf "%s,%s,%s, %s,%s\n", $1, $2, $3, $4, $5}' >> $WORKING_DIR/csv/neo4j/albums.csv
jq -r '[.album.id, .artists.id, .disc_number, .duration_ms, .explicit, .id, .popularity, .track_number, .name] | @csv' $WORKING_DIR/data_spotify/tracks_neo.json | awk -F, '{printf "%s,%s,%s,%s,%s,%s,%s,%s,%s\n", $1, $2, $3, $4, $5, $6, $7, $8, $9}' >> $WORKING_DIR/csv/neo4j/tracks.csv
 
cat $WORKING_DIR/csv/neo4j/artists.csv | sed 's/.$//' | sed 's/$/"/' | sed '1s/.$//' | sed "$ d" | sed 's/"//g' | sed 's/\r/\\r/g' | sed 's/\\//g' | sed "s/[#|$|%|*|@|&|'|-|_|¿|?|+|=]//g" | sed 's/[^a-zA-Z0-9, -]//g' > $WORKING_DIR/csv/neo4j/artists_neo.csv
cat $WORKING_DIR/csv/neo4j/albums.csv | sed 's/.$//' | sed 's/$/"/' | sed '1s/.$//' | sed "$ d" | sed 's/"//g' | sed 's/\r/\\r/g' | sed 's/\\//g' | sed "s/[#|$|%|*|@|&|'|-|_|¿|?|+|=]//g" | sed 's/[^a-zA-Z0-9, -]//g' > $WORKING_DIR/csv/neo4j/albums_neo.csv
cat $WORKING_DIR/csv/neo4j/tracks.csv | sed 's/.$//' | sed 's/$/"/' | sed '1s/.$//' | sed "$ d" | sed 's/"//g' | sed 's/\r/\\r/g' | sed 's/\\//g' | sed "s/[#|$|%|*|@|&|'|-|_|¿|?|+|=]//g" | sed 's/[^a-zA-Z0-9, -]//g' > $WORKING_DIR/csv/neo4j/tracks_neo.csv

rm $WORKING_DIR/csv/neo4j/artists.csv
rm $WORKING_DIR/csv/neo4j/albums.csv
rm $WORKING_DIR/csv/neo4j/tracks.csv
#+end_src

Ahora sí ya estamos listos para insertar los datos a Monet y Neo4j :D
** MONET
Primero creamos el contenedor de Docker con la imagen de Monet y creamos la base de datos "spotify".

Luego copiamos los archivos de nuestra máquina dentro del docker para poder incertar los datos a la base de datos de monet. Creamos las tablas y finalmente incertamos los datos. 

Todas las columanas tienen tipo de dato ~varchar~, esto para evitar errores que requirieran mayor limpieza de datos. Esto no es gran problema pues para las queries (que veremos al final de este documento) podemos castear los datos.

#+begin_src sh
WORKING_DIR=$(pwd)
WORKING_DIR=$WORKING_DIR/data

docker stop monetdb 
docker rm monetdb 

docker run -d --name monetdb -p 50001:50000 --mount source=spotify-data,target=/data monetdb/monetdb 

docker cp $WORKING_DIR/csv/monet monetdb:/data

docker exec -it monetdb monetdb create -p monetdb spotify 


docker exec -i monetdb mclient -d spotify -s "create table if not exists artist(followers varchar(100), genre varchar(100),artist_id varchar(100),popularity varchar(100),name varchar(200));"
docker exec -i monetdb mclient -d spotify -s "create table if not exists album(available_market varchar(100),album_id varchar(100),release_date varchar(100),total_tracks varchar(100),name varchar(200));"
docker exec -i monetdb mclient -d spotify -s "create table if not exists track(album_id varchar(100),available_market varchar(100),disc_number varchar(100),duration_ms varchar(100),explicit varchar(100), track_id varchar(50),popularity varchar(50),track_number varchar(50),name varchar(200));"

docker exec -i monetdb mclient -d spotify -s "copy offset 2 into artist from '/data/monet/artists_mon.csv' on client using delimiters ',',E'\n',E'\"' null as ' ';"
docker exec -i monetdb mclient -d spotify -s "copy offset 2 into album from '/data/monet/albums_mon.csv' on client using delimiters ',',E'\n',E'\"' null as ' ';"
docker exec -i monetdb mclient -d spotify -s "copy offset 2 into track from '/data/monet/tracks_mon.csv' on client using delimiters ',',E'\n',E'\"' null as ' ';"
#+end_src

** NEO4J
Ahora sí, otra pesadilla (horas de programar enajenadamente)
Primero creamos el contenedor de Docker con la imagen de Neo4j. Hasta aquí todo muy bonito, pero luego había que meter los datos al docker (sin perder permisos en el intento :´) y ponerla en una carpeta exacta).

Luego copiamos los archivos de nuestra máquina dentro del docker para poder incertar los datos a la base de datos de noe4j. Incertamos los datos y finalmente creamos las relaciones entre los nodos:

1. *Artists y Albums*: a partir del artist_id.
2. *Tracks y Albums*: a partir del album_id
3. *Tracks y Artists*; a partir del artist_id

#+begin_src
WORKING_DIR=$(pwd)
WORKING_DIR=$WORKING_DIR/data/csv/neo4j

docker stop neo4jdb
docker rm neo4jdb

docker run -d --name neo4jdb -p 7474:7474 -p 7687:7687 -v $WORKING_DIR:/var/lib/neo4j/import --env NEO4J_AUTH=neo4j/test neo4j > /dev/null

sleep 15
docker exec -t neo4jdb cypher-shell -u neo4j -p test 'LOAD CSV WITH HEADERS FROM "file:///artists_neo.csv" AS row CREATE (n:Artist) SET n = row, n.followers = toInteger(row.followers), n.popularity = toInteger(row.popularity);'
docker exec -t neo4jdb cypher-shell -u neo4j -p test 'LOAD CSV WITH HEADERS FROM "file:///albums_neo.csv" AS row CREATE (n:Album) SET n = row, n.releaseDate = date(row.releasedate), n.totalTracks = toInteger(row.totaltracks);'
docker exec -t neo4jdb cypher-shell -u neo4j -p test 'LOAD CSV WITH HEADERS FROM "file:///tracks_neo.csv" AS row CREATE (n:Track) SET n = row, n.discNumber = toInteger(row.discnumber), n.durationMs = toInteger(row.durationms), n.explicit = toBoolean(row.explicit), n.popularity = toInteger(row.popularity), n.trackNumber = toInteger(row.tracknumber);'

docker exec -t neo4jdb cypher-shell -u neo4j -p test 'MATCH (ar:Artist),(al:Album) WHERE ar.artistid = al.artistid CREATE (al)-[:ALBUM_OF_ARTIST]->(ar)'
docker exec -t neo4jdb cypher-shell -u neo4j -p test 'MATCH (t:Track),(al:Album) WHERE t.albumid = al.albumid CREATE (t)-[:TRACK_OF_ALBUM]->(al)'
docker exec -t neo4jdb cypher-shell -u neo4j -p test 'MATCH (t:Track),(ar:Artist) WHERE t.artistid = ar.artistid CREATE (t)-[:TRACK_OF_ARTIST]->(ar)'
#+end_src

* Queries analíticas
** Mongo
1. El primer query sirve para observar si hay alguna relación entre la duración de la canción y la popularidad de la misma (la popularidad va de 0 a 100, este último la máxima popularidad). El output de esta consulta es el promedio de los promedios de la duración de las canciones por popularidad de las 10 popularidades con mayor duración en sus canciones (averageAvgTime), a su vez también regresa el promedio de dichas popularidades (averagePopularity). Por ejemplo: si averagePopularity está por arriba de 50, podemos notar decir que hay una relación positiva de la popularidad y la duración de la canción. 

#+begin_src js
db.tracks.aggregate([
    {$project:{name:1,popularity:1,duration_ms:1,_id:0}},
    {$group:{_id:"$popularity",avgTime:{$avg:"$duration_ms"}}},
    {$project:{_id : 0, "popularity" : "$_id",avgTime:1}},
    {$sort:{avgTime:-1}},
    {$limit:10},
    {$group: {_id: null,averageAvgTime: { $avg: "$avgTime" },averagePopularity: { $avg:"$popularity" }}}])
#+end_src
